/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface GhostCounterInterface extends Interface {
  getFunction(
    nameOrSignature: "ectoplasms" | "exorcise" | "haunt" | "reset"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Exorcised" | "Haunted" | "Reset"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ectoplasms",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "exorcise", values?: undefined): string;
  encodeFunctionData(functionFragment: "haunt", values?: undefined): string;
  encodeFunctionData(functionFragment: "reset", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ectoplasms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exorcise", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "haunt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
}

export namespace ExorcisedEvent {
  export type InputTuple = [by: AddressLike, newCount: BigNumberish];
  export type OutputTuple = [by: string, newCount: bigint];
  export interface OutputObject {
    by: string;
    newCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HauntedEvent {
  export type InputTuple = [by: AddressLike, newCount: BigNumberish];
  export type OutputTuple = [by: string, newCount: bigint];
  export interface OutputObject {
    by: string;
    newCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResetEvent {
  export type InputTuple = [by: AddressLike];
  export type OutputTuple = [by: string];
  export interface OutputObject {
    by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GhostCounter extends BaseContract {
  connect(runner?: ContractRunner | null): GhostCounter;
  waitForDeployment(): Promise<this>;

  interface: GhostCounterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ectoplasms: TypedContractMethod<[], [bigint], "view">;

  exorcise: TypedContractMethod<[], [void], "nonpayable">;

  haunt: TypedContractMethod<[], [void], "nonpayable">;

  reset: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ectoplasms"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "exorcise"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "haunt"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reset"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Exorcised"
  ): TypedContractEvent<
    ExorcisedEvent.InputTuple,
    ExorcisedEvent.OutputTuple,
    ExorcisedEvent.OutputObject
  >;
  getEvent(
    key: "Haunted"
  ): TypedContractEvent<
    HauntedEvent.InputTuple,
    HauntedEvent.OutputTuple,
    HauntedEvent.OutputObject
  >;
  getEvent(
    key: "Reset"
  ): TypedContractEvent<
    ResetEvent.InputTuple,
    ResetEvent.OutputTuple,
    ResetEvent.OutputObject
  >;

  filters: {
    "Exorcised(address,uint256)": TypedContractEvent<
      ExorcisedEvent.InputTuple,
      ExorcisedEvent.OutputTuple,
      ExorcisedEvent.OutputObject
    >;
    Exorcised: TypedContractEvent<
      ExorcisedEvent.InputTuple,
      ExorcisedEvent.OutputTuple,
      ExorcisedEvent.OutputObject
    >;

    "Haunted(address,uint256)": TypedContractEvent<
      HauntedEvent.InputTuple,
      HauntedEvent.OutputTuple,
      HauntedEvent.OutputObject
    >;
    Haunted: TypedContractEvent<
      HauntedEvent.InputTuple,
      HauntedEvent.OutputTuple,
      HauntedEvent.OutputObject
    >;

    "Reset(address)": TypedContractEvent<
      ResetEvent.InputTuple,
      ResetEvent.OutputTuple,
      ResetEvent.OutputObject
    >;
    Reset: TypedContractEvent<
      ResetEvent.InputTuple,
      ResetEvent.OutputTuple,
      ResetEvent.OutputObject
    >;
  };
}
